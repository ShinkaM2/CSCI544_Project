#!/usr/bin/env python
# -*- coding: utf-8 -*-

import copy

import torch
import numpy as np

from dev_misc import Map

PAD_ID = 0
SOW_ID = 1
EOW_ID = 2
UNK_ID = 3

PAD = '<PAD>'
SOW = '<SOW>'
EOW = '<EOW>'
UNK = '<UNK>'
START_CHAR = [PAD, SOW, EOW, UNK]

_CHARSETS = dict()


def register_charset(lang):
    global _CHARSETS

    def decorated(cls):
        assert lang not in _CHARSETS
        _CHARSETS[lang] = cls
        return cls

    return decorated


def get_charset(lang):
    '''
    Make sure only one charset is ever created.
    '''
    global _CHARSETS
    cls_or_obj = _CHARSETS[lang]
    if isinstance(cls_or_obj, type):
        _CHARSETS[lang] = cls_or_obj()
    return _CHARSETS[lang]


def _recursive_map(func, lst):
    ret = list()
    for item in lst:
        if isinstance(item, (list, np.ndarray)):
            ret.append(_recursive_map(func, item))
        else:
            ret.append(func(item))
    return ret


class BaseCharset(object):

    _CHARS = u''
    _FEATURES = []

    def __init__(self):
        self._id2char = START_CHAR + list(self.__class__._CHARS)
        self._char2id = dict(zip(self._id2char, range(len(self._id2char))))
        self._feat_dict = {}
        for f in self.features:
            self._feat_dict['char'] = None
            self._feat_dict[f] = False

    def __len__(self):
        return len(self._id2char)

    def char2id(self, char):
        def map_func(c): return self._char2id.get(c, UNK_ID)
        if isinstance(char, str):
            return map_func(char)
        elif isinstance(char, (np.ndarray, list)):
            return np.asarray(_recursive_map(map_func, char))
            # return np.asarray([np.asarray(list(map(map_func, ch))) for ch in char])
        else:
            raise NotImplementedError

    def id2char(self, id_):
        def map_func(i): return self._id2char[i]
        if isinstance(id_, int):
            return map_func(id_)
        elif isinstance(id_, (np.ndarray, list)):
            return np.asarray(_recursive_map(map_func, id_))
            # id_.tolist()
            # if id_.ndim == 2:
            #     return np.asarray([np.asarray(list(map(map_func, i))) for i in id_])
            # elif id_.ndim == 3:
            #     return np.asarray([self.id2char(i) for i in id_])
        else:
            raise NotImplementedError

    def get_tokens(self, ids):
        if torch.is_tensor(ids):
            ids = ids.cpu().numpy()
        chars = self.id2char(ids)

        def get_2d_tokens(chars):
            tokens = list()
            for char_seq in chars:
                token = ''
                for c in char_seq:
                    if c == EOW:
                        break
                    elif c in START_CHAR:
                        c = '|'
                    token += c
                tokens.append(token)
            return np.asarray(tokens)

        if chars.ndim == 3:
            a, b, _ = chars.shape
            chars = chars.reshape(a * b, -1)
            tokens = get_2d_tokens(chars).reshape(a, b)
        else:
            tokens = get_2d_tokens(chars)
        return tokens

    def process(self, word):
        # How to process chars in word. This function is language-dependent.
        raise NotImplementedError

    @property
    def features(self):
        return self._FEATURES


@register_charset('en')
class EnCharSet(BaseCharset):

    _CHARS = u'abcdefghijklmnopqrstuvwxyz'
    _FEATURES = ['capitalization']

    def process(self, word):
        ret = [copy.deepcopy(Map(self._feat_dict)) for _ in range(len(word))]
        for (i, c) in enumerate(word):
            if c in self._char2id:
                ret[i].update({'char': c})
            else:
                c_lower = c.lower()
                if c_lower in self._char2id:
                    ret[i].update({'char': c_lower})
                    ret[i].update({'capitalization': True})
                else:
                    ret[i].update({'char': ''})
        return ret


@register_charset('es')
class EsCharSet(BaseCharset):

    _CHARS = u'abcdefghijklmn√±opqrstuvwxyz'
    _FEATURES = ['capitalization']


@register_charset('es-ipa')
class EsIpaCharSet(BaseCharset):

    _CHARS = u'abdefgiklmnoprstuwx√∫…≤…æ é ù ß'
    _FEATURES = ['']


@register_charset('it')
class ItCharSet(BaseCharset):

    _CHARS = u'abcdefghijklmnopqrstuvwxyz√†√®√©√¨√Ø√≤√∂√π'
    _FEATURES = ['capitalization']


@register_charset('it-ipa')
class ItIpaCharSet(BaseCharset):

    _CHARS = u'abdefghijklmnopqrstuvwz≈ã…î…õ…≤ É é § ß'
    _FEATURES = ['']


@register_charset('pt')
class PtCharSet(BaseCharset):

    _CHARS = u'abcdefghijklmnopqrstuvwxyz√°√¢√£√ß√©√™√≠√≥√¥√∫'
    _FEATURES = ['capitalization']


@register_charset('pt-ipa')
class PtIpaCharSet(BaseCharset):

    _CHARS = u'abdefgiklmnopstuvz√§…ê…î…õ…®…æ Å É é í'
    _FEATURES = ['']


@register_charset('heb')
class HebCharSet(BaseCharset):

    _CHARS = u'#$&-<HSTabdghklmnpqrstwyz'
    _FEATURES = ['']


@register_charset('uga')
class UgaCharSet(BaseCharset):

    _CHARS = u'#$&*-<@HSTZabdghiklmnpqrstuvwxyz'
    _FEATURES = ['']


@register_charset('heb-no_spe')
class HebCharSetNoSpe(BaseCharset):

    _CHARS = u'$&<HSTabdghklmnpqrstwyz'
    _FEATURES = ['']


@register_charset('uga-no_spe')
class UgaCharSetNoSpe(BaseCharset):

    _CHARS = u'$&*<@HSTZabdghiklmnpqrstuvwxyz'
    _FEATURES = ['']


@register_charset('el')
class ElCharSet(BaseCharset):

    _CHARS = u'fhyŒ±Œ≤Œ≥Œ¥ŒµŒ∂Œ∑Œ∏ŒπŒ∫ŒªŒºŒΩŒæŒøœÄœÅœÇœÉœÑœÖœÜœáœàœâ'
    _FEATURES = ['']


@register_charset('greek')
class ElCharSet(BaseCharset):

    _CHARS = u'fhyŒ±Œ≤Œ≥Œ¥ŒµŒ∂Œ∑Œ∏ŒπŒ∫ŒªŒºŒΩŒæŒøœÄœÅœÇœÉœÑœÖœÜœáœàœâ'
    _FEATURES = ['']


@register_charset('linb-latin')
class LinbLatinCharSet(BaseCharset):

    _CHARS = u'23adeijkmnopqrstuwz'
    _FEATURES = ['']


@register_charset('lineara')
class LinACharset(BaseCharset):
    _CHARS = u'êÄÉêÄ≥êÄäêòûêÄ®êòáêÄôêÄö\U0001076bêÄìêÄïêÄ≤êÄáêÑâêÄ¥êÄâêÄèêÄÇêÄ´êÄ∂êÄ†êÄñêÄûêÄÖêÄ¨êÄ∑êÄõêÄ±êÄëêò≠êÄºêÄÆêÄîêô´êò¶êòôêòüêÄØêò∫êÄ§êòâêô†êòΩêÄêêò∂êòõêôïêÄÅêòúêôπêòØêôÄêô±êòêêòπêòÑêôñêò£êò∞êÄ¢êöóêò∑êôôêÄòêò©êôãêôØêòßêôÑêòäêôõêò®êôáêö¢'
    _FEATURES = ['']


@register_charset('linear_b')
class MinoanCharSet(BaseCharset):

    _CHARS = u'êÄÄêÄÅêÄÇêÄÉêÄÑêÄÖêÄÜêÄáêÄàêÄâêÄäêÄãêÄçêÄèêÄêêÄëêÄíêÄìêÄîêÄïêÄñêÄóêÄòêÄôêÄöêÄõêÄúêÄùêÄûêÄüêÄ†êÄ°êÄ¢êÄ£êÄ§êÄ•êÄ¶êÄ®êÄ©êÄ™êÄ´êÄ¨êÄ≠êÄÆêÄØêÄ∞êÄ±êÄ≤êÄ≥êÄ¥êÄµêÄ∂êÄ∑êÄ∏êÄπêÄ∫êÄºêÄΩêÄøêÅÄêÅÅêÅÇêÅÑêÅÖêÅÜêÅáêÅàêÅâêÅäêÅã'
    _FEATURES = ['']


@register_charset('fr')
class FrCharSet(BaseCharset):

    _CHARS = u'abcdefghijklmnopqrstuvwxyz'
    _FEATURES = ['capitalization']


@register_charset('lost')
class LostCharSet(BaseCharset):
    _CHARS = u'aeioubpdtfvgklmnrszw'


@register_charset('k1')
class K1CharSet(BaseCharset):
    _CHARS = u'aeioubpdtfvgklmnrszw'


@register_charset('k2')
class K2CharSet(BaseCharset):
    _CHARS = u'aeioubpdtfvgklmnrszw'


zh = u'ÊôìÂçìËßÄÈ©¨Â§ßÁªèË®òÂè∂Ê®ìË∫´Ê≤ìÂ¶ñÊ∑ëÂ≤≥ÁÆï‰∫íÂπ£ÈöäÂä®ÁóáÂã§Ë™ûÈªûÂ°ûÁé´ÊúùÁîµÊÄªÊãºÂõ†Êò•Êµ¶Á©∫Áõ∏Ê•äËÅñÂïÜÂ∞ëÊØõ‰∫ßÈ¢ÜËÖ≥‰π°Êù±ËêßÊó•Á¥ÄÈü≥ÈÇ£Ê∞¥Ë°ìÂéüÂπ¥Êâ©ÂéøÁ∂ì‰∏∫Áêâ‰∫§ËàíËãèÂñÆÊú∫Â£ΩÂºèÁï¥ÈÉΩ‰πêÁä∂ÈöÜÂ§™Áâ©Ë§áÈõÜÈó¥ÂªüÈÄ†Ê≠∑ÁµÑÈÉëËêáÊÅãÂ§ÆÁî≤Á¶ÅÈåÑÊÄÅÂÜåËµÑÂπ≤Ê±ΩÊäïÁáàÊó®ÂæÑÂêëÂõ¥Â∞îÊøÆ‰∏ä‰ªªÂ±ãÊñóÁµπÂ≠óËºïÂ•âÂ•ßËôπÂÄëÁöá‰ºØË°åÂùäÈôÑÂΩπÊôÇÁ§éÁâàÈñãËÉΩËñáËçíÁÅ≠Âª¢ÁâπÂü∫Èô¢Ê≤ªÂûãÁÅµÈ†ÇÂî±ÊãñÂ∫ÑÊ¨ßÂúñÁ•ñÈÖøÂîáÈ§òÈ†àÁ∫¨ÊîπÊ≤≠ÁõæÁ¥ôÊò≠ÂÖµÊë©ÊáâÔºüÈô∏Ê£ãÂêéË®àÁúæÂçÉÁã±Êï∞Ë∂≥È´îÂüüËÄÅÈò¥ÈÆÆÈ¶¨Âêà‰ø†Ê∫´Èô£Ë¶™ÈéÆÁõõÁÇéÁÅ£ÁªøÁêÉÂàòÈõ´ÊÄ•ÊôØÂΩåÊåëÂùáÊà¥Â£ÅÂÜçÂΩíËèÅÂÖ¨Êô∫ÁßëÈª®‰∫û„ÄÅÁ¨¨È¶ñÁÉüÊ§çÊ≥ΩÂõ¢ÂúãÁã¨Êü≥Âë≥Â∫ÜÁæΩÂ∞àË•øÂ†ÖÈ¶ôÈ∂¥Á∏£Áçª‰∫πÁ∏±ÈìÅÁ¨¶ÂÇ¨Â∫∑‰πÉÊõ≤Âü∑Ë∂äÈñ£ÈÄ≤ÊòôÂ†±Ëá∫Âå∫ÈáåÁ≤üËÖäÁæÖÊ¨¢Âè∑Ë´ñ‰øÅÁ∫ØÁâá‰ºäÊú¨ÊØîÂê≥Á•≠ÊºÇÂêæÈ¢®‰∏öÂàáÂÖ±Âè∞ÊàêÂ∑¢ÈõúÂ£§ÊùÉÁß¶È°πÁêÜËºâËà™ÂÖãÁ§∫‰ø∏Ê∫™Ë£°ÂÇôÊ≠•ÁÅæÂ¥éÊ†°Áõ¥Èõ¢ÂâçÈêòÊ±âÊéßÊúàÊ¨ä‰∫ëÊéñÊõπÂ±ïÊª¶Â§¢ÂøçÂú∞Âè£Êã©Âõ≠ÊÅíËõÆÂÆÅÊ¥≤Ê±§ÂàíÂº†Ë≠∑‰ºöÁà≠‰ª£Â∞èÂπøÂ∑•ÊåáÂÆòÂÆó‰π¶ÂçéÂù™ÂìÅÂ≤°Áæ§‰æèÂÖíÂêâÊªøÂ∞çÊï¥Èò∂ÈÉ®ÂπïÂøÉË°îËâ≤ÂùÄËØ∏ÂÜàÈáúÂëΩËÆìÈíµ‰ΩøÊ†áÂππÈòµÊ≤íÂåóÂä†Ê≥âÂÆøË±êÁªºÂ∑≤Ë≠¶Ë°®ÊòåÂÜ∞ÂÅµÁÜäÊúüÂè§Âô®Á••ÂÖ´ÁúÅÂ∫¶‰ª∂ËææÈõô‰ººÂãÖÂ∏ù‰∫¨ËæØÈÄ£ÈóúÂ∏∏‰∏òÂîØÈü¶Ê°àÁ∂≤ÂêØÂçÄÂ•≥Ëä±ÂÆôÊéàÊΩòËªçËØ≠ËçØ‰πùË¥¥‰∏úÁèæ‰ΩïÂè≤ÂØºË≠¥ÊïëËàáÂâá‰∏ñÂêçÂ≠ôÂΩ±ÁôºÂèÉÁï™ÂÆöÊ≠£Êí≠Èî¶Ê®ÇÊ¨°Ë™åÂ•ΩË™™Â™õÂ±ÖÈôàÈ≠èË∑ëËìùÈ∞çÁü¢Á´•ÊäòÁçéÂùõ‰ΩìÊ©øÈ™®Â∫ôÈõ®ÈöÖËøë‰ªÅÁõÆÁ¥ÖÂíåÂõΩÊ≤ºË°£Èö∏ÂÖ≠Á∫™ÊòéÂëòÁ´ãÂäüÊπñËôïÂÉëÂÖÉÂåñË¶ΩÊé•ÂçäËÆÆÊâπÊúØÈì∫Âæ∑Èì∂ËÜúËªäÊº´Ë©ûËóç‰ªñËÆ∫ÂñÑÂ∑ûÂáΩÂúçÁæéËäÇÊë∏Âè´Ë£ÖË±°ÁôÇÊûúÈπΩÂÖßË≤´Ëø™ËÅîÊûÑ‰øÆÂ∞ºÂÜõÂ§©ÂÖ∞Âçá‰∏≠Ê≤àÊü¥Â†ÇËã±ÊîøÈÅ†Êï≤ÊàëË≤ìÊè¥ÊîæËóùÊ©ãÁ¥çÂèÇË´∏Ë¶ãÈÉµÊÅÜË≤¥Â†ÄÂ°öÂì°Êøü‰πâÂÜµÈÅóËß£ÁßÄÈÅáÊë∫ÈÄöÊç∑‰ΩôÂª∂ÂäõÁÆ°Âù°ÊùëÂú£ÁúºÊäÄÈô≥ÈÅ£ÊúõÂºïÊ≠åÈÄôÈñìÂÜ† ÂÄºËåÇÁÆóÁ°ïÈùúÈôΩÂàÜÂÆ£Â°µÈæúÂπüÂºÄÂÆàÂ∏ÇÂÄâÂ•àÊùæÊ∫ùÊñáÁõüÈò≥Êæ§Á§º‰∏ÉÊ£ÆÂâ©ËôüÁâßË¥®Èü©Â†¥‰ºòÂëäÁéâÊé®ÊùØÂÆ∂È§®ÊéíÂÑíÊï∏Êé¢Âà©ÂúíÂÖ¥ÂΩ•ÁúüÊ©üÊ•∏ÂÜúÁù£ÈïøÂêπËìüÈó®Êø±ÂøóÊ´üÁÅ´ÊîªÊôãÈ£üÊñ∞ÂßîÂ≠êËÇÉÂçöÂõõÈÑâÊµ∑Ê¶ÆÂú∫ÂúòÁ±ªÈÄâËê¨Ê≥æÈ¨ºÂ∏´Âπ°ÈÅäÈ†πÈìú‰Ωú‰ª§Ëê©ËΩ®Ê®ôÈõªËøûÊÖ∂Â§ñÈ°æ‰∏áÊÉÖËá¥‰∫≠ÊÅ©ÈáçÂØåÈçæËëµÂ∑¥Â≠©Âæ°Â∞æËàçÁöÑÊ≥∞Ë•üÈúáÊ¥ûÈÆ´ÊÅØÈ¢òËñ©ËÆäÁ∫≥ÂØüËÄÖ‰∏πÂàùÊµéËâ¶ÂüéÈÄíÊ±üË∑ùÂù¶ÁπîÂ∫≠ÂãïÁ®ªÂú®È†≠Â∑´‰æÜÂèóË®¥Èå¢Ê∞£Â±ÄÈüµÊÜæÊà∂Â§ÑÈØñÂë®Âèà‰πüÁ≤âÂ†°Âç∞ÁõêÈÑ∞ËÆ©Êä•ÂèãÊú®Âç´Â∞Å‰ΩõÂØ∫ËëâË°óÈôÜÂ®ÑÂç≥ÂØøËó§ÁãêÈÜ´Á£∫Êà∞Êª®ÈáéÁåøË¥µÈ∑πÈáèË®ÄÁï´ÁãπÁ´àËçâÂà•Á´ØÂì™È¨•Á∫¢ÈÅìÂõæÈ¥ªÁ¨πÂØ®Â∏≠‰∫àÊó∂ÊõÜËØ∑Áü≥ÈôÖÊ±ÄÁªüË≤®ÂùÇÊµÆË±ÜÂ≤¨ÈÇäÈõ∑ÂºµË¥ßÂÆáÊ≠¶Êî∂ÊµÖÂßãÊåÅœÜÁÑ°ÈüìÁ∏ΩÊóèÂêåÂ∏¶È±ºÈ†∑ÂçîÁ∫≤Áç®Âä°Ë∑ØË†∂ÁµêËµ§Êûó‰º∏ÁØâÁÜ±ÈπèÊ∑±È£éÈõ™Ë©±ÁîöËπ§Ë∞∑‰∫ãÂΩôÈõÖËøüÊÆ∫Ëò≠ÁñèÁÅòÈôÄÈå¶Âõ∫Â∫úÂºòÁßãÊúÉËá™ÈêµÂ£´Á©óÈÅîÈπøËßâËÇ•Âä©ËµµÈ©ªÂ±¨Â§¥ÊÑõÊå∫ÊóãËßàÂÆ§Á≤æË¥ñÁöãËµõÂà∏Âà§‰øÉÊùøÊâòÈà¥ÂçóÊóÖËæπÂ™ΩÁïåÁ¢≥Â∑ùÂ∞ªÂøµÊïàÊù•ËÉÄÊ´ªÁÄ®ÂãûÂ∫ßÂüÉÁßÅÁôΩÁ≠ñËàπ‰∫îÊ∏§Ëç∑ÂÄ∫Â§èÂüîÂèëÂ≠∏Â°∞Èô§ÂºÉÁ≠âÁ≥∏ÊñπÂè∏Á©éÊîØÁî±Ê©´ÂÖ®Ë≥Ω‰øÇÂä≥ÂãêÊâÄËΩâÊ°•ÂÇ≥È≤úÈæçÂèåÊ∞∏Â°òÂΩàÁªÑËÇ≤ÂéÖËÉûËâ∫Á•ûÂúìËßÇÈñÄ‰ª•Ëû∫ÊòØÊ≥¢Ê±ÇÂåØÊü•ÂäÉÈô∂ÊùúË≥£Âá≠ÊàòÊπØÂ∞áÈÅ∏Áº∫‰∏ÄËàû‰ª≤Áõä‰∏ÅÊúâÂª∫Ê¥•Ê†πÈÉ≠Â§úÂñúÂπ≥ÁàÜÊô∂Ë∂ÖÊ∏©‰πãËµ∑ÂæãÁ¥∞‰∏ªÈ£õ‰∏çÂçèËã•Ëê•ÈùûÂ∞ÜÊúçÈ∫•ËΩÆÁ§æÈ≥•ÁØáÁ∫øÂÜÖÂ∞±Ê≤ôÈö∂ÂëºÁÜüÁî®‰ΩêÊ°ÉÊ∑∫ÂÆ¥ÊâìÂØÜÂåªÂæóÁ¨îÊ¥ãÁñóÂ†ÜÁâåËªíËΩ¶‰ø°ÊõøËÅûÂπ∏ÈõÑÈí¶ÂèäÈ£ØÈóÆÂò¥ÂØ¶Âö¥ÊÉ†È©øÂ≤ÅÊµÅÊôÆÈ†Ö‰∏éËÅ™ÂÖ©ÂçàÂÖ∏Ê∑≥Â±±ÂÆ´Ê∞ßÈùíÂá±ËãëË≥ÄË≥ìÈªëÁ∫πÈ´òË≠∞Áï†ÊâãÁà∂Á≥ª‰∏â‰πÖÈ∏£Ëä¶ÊäóÈöõÂÖ•ÊúÄÈæôÂúüÊòüÂà∂ËôéË°õÊüîÊ∏ØÁî∞Ê∞ëÊ¢ùËààÁ´πËçîÂ•ñÈïáÂáØÊó†ËØÅÂ≠òÁ∑öÁØ§Â•¥Ê¢ÖÁë∞Áü•Â®Å‰∫∫‰Ω†ÁéãÊ≠êÊ≤≥ÈÄîÊÄßÂΩ¢Â≤©Á•®Á∏ÆËßíÈùñÂçïÁª¥È¶ÜËÄÉÁëû‰øÑËó©Á´ôËè≤Ê≠°Â§öÈÖíÂæµÊπòÂ∏∂ÁÑ∂‰∫âÈÉéÊ¥óÊÖàÂÖ≥ÂºìÊ∏°ÂùêÊØçÈÉ°Âá∫Á°´ÁáÉÁªìÁî∫È≥≥ÊåÇÂäáÁßØÈò≤-Á±≥ÁßçÂÆÆËñîÁü≠Ê±∫Ë∞±Èõ≤Áµ±ÂêÑË≥ºÈòüÊ≤ÉÈÇÆÁæ©Ë™≤Âø´‰ªôËâØÁóÖÁ®ãÂ∏ÉÊ¢®Êï∑Èï∑Ê∏ÖÁ∞óÈáëËØùÂ≤±Âî§ÁéáÊΩÆË∞ÉÊØíËÅØÈ®éÂ∫îÊ≥ïÁßòÁøíÊ¶ÜËàâÈÅãË≠â‰∫å‰∏ãÂÖöÂ∫ïÊóóÂàóÁê¥ËØçÊ∞îÂ≠¶Á¶èÂçÅÊó¢ÁîüÊïôÁ®ÄË≤øÂéÜÊãâÁ©çÊäºÂãáÁé∞Âª£Â±•ËÆ°ÊìäÊãõË¥∏ÈÄüË¶ñÂÆâÂ∏àÊ∫êËß∏Â§±ÈÅôÂÅáÈÄ¢‰ΩçÊû∂Êò†ÊΩúÂèØÂæå‰∏∏‰øùËèØ‰∫ïÁªáÈù¢ÂãôÂ≥∂Áº©Â≤≠Á¥ö‰∏≤ÂÇ®ÁôªÈªÉÂ°îÊôùÂæΩÈò™Â≤õÊõâÂÖâÂèç'


@register_charset('zh')
class ChineseSet(BaseCharset):
    _CHARS = zh


ja = u'ÂçìËåòÈÅ∫Â§ßÈ≠îË®òË¶ÅÊ≤ìÈ†ÉÂ¶ñÊ∑ëÂ≤≥ÁÆï‰ªèÈ°ûÂπ£ÈöäÁóáË™ûÊõá„Åà„ÄúÈúäÈüªËàéÊúù„Å®ÁÅØÂ∞ë?Êò•Á©∫Êµ¶ÊÅµËÅñÁõ∏Âõ†Ê•äÔºâÂïÜÊØõÈ†ÜÊù±Á¥ÄÊó•Ë™¨ÂØßÈü≥ÈÇ£ÂÜäÊ∞¥Ë°ìÂéü‰∫§Âπ¥ÁêâËàíÈáàÊ≠¥ÂºèÁï¥ÈÉΩÊöÅËñäÁä∂ÈöÜ‰ø£ÂÆ¢Â§™„ÅéÁâ©Ë§áÈõÜËªüË™øÂªüÈÄ†ÊÅãÁµÑËêáÂ§ÆÁî≤Á¶ÅÊ≤¢Ê±ΩÂ≠´„ÇàÊäïÊó®ÂæÑÂêë‰ªª‰∏äÊøÆÂ±ãÊñóÁâΩÁµπÂ≠óÁΩÆÂ•âËôπÁöá‰ºØË°åÂùäÂ•áÈôÑÊôÇË¶≥„ÇâÂΩπÁ§éÈñ¢ÁâàËÉΩÁîªËçíÁâπÂæ≥Èô¢Âü∫Èú≤ÊóßÊ≤ªÂûã„Å™È†ÇËÅ°Ë±äÊ¨ßÁ•ñÂîáÊ≤≠ÊîπÁõæÁ¥ôÊò≠ÂÖµÈ°åÈô∏Ê£ãË®àÂêéÂçÉÊï∞Ë∂≥Èå≤Ê£µÂüüÁõ§ËÄÅÈ¶¨ÂêàÂÆüËªΩÈâÑÈô£Ë¶™ÈéÆÁõõÂ∞éÁÇéÁêÉÈ≠öÊ†ÑÂë™Èõ´ÊÄ•ÂÖêÊõ∏ÊôØÊà¥Ê∫ÄÂ£ÅÂÜçËèÅÂÖ¨Êô∫ÁßëÂøúÂì≤ÁÖß„ÄÅÈÇ∏Á¨¨È¶ñÊ§çÁã¨ÁæΩÊü≥Âë≥Ë•øÈ¶ôÈ∂¥„Å¨‰∫πÂ∫∑ÁåüÂ±§‰πÉÂÑ™Âü∑Ë∂äÈñ£Êõ≤ÈÄ≤Â†±Âå∫ÈáåÁ≤üÂè∑Ë´ñÂõ≥Ôºà‰∫úÁâá‰ºäÊú¨Ê®™„Å£È¢®ÂÉèÊØîÊö¥ÊåôÂêæÊºÇÂàá„Å∫„ÅªÂÖ±Ê¥ªÂè∞ÂΩºÊàêÊ∞∑Ê∞óÁß¶ÁÄãÁêÜËà™ÂÖãÂºÅ‰ø∏Á¢∫Â∑£ÂÇôÊ∏àÊà∏Âñ∂Â¥éÊ†°Áõ¥Èõ¢ÂâçÈêòÂ∞ÇÁçÑÊúàÈØ®ÊéñÂ§¢ÂøçÂ±ï„Çå„Å∞ÈÄÄÂú∞Âè£„Å†ÊÅíÊ¥≤ËöïÁô∫Ë≠∑‰ºöÊåá‰ª£Â∞èÂÆòÂ∑•ÂÆóÂù™ÊÖÆÂ≤°ÂÜôÁæ§‰æèÂêâËÑöËß¶Êï¥ÈÉ®Á±çÂπïÂøÉÂªÉËâ≤ÈáúÊ∏ãÂëΩÁ∑Ø‰ΩøÂππÂæÖ„Åø‰ªãÂåóÂä†Ê≥âÂÆø„ÅõÂÅµË≠¶ÊòåË°®Ë©¶ÁÜäÊúüÂè§„ÅëÂô®Á••ÂÖ´ÁúÅ‰ª∂Â∫¶‰ººÂãÖÊà¶‰∫¨Â∏ùÈÄ£Â∏∏ÂØæ‰∏òÁ∂≤Â∂∫ÂÆôÂ•≥Ëä±ÊéàÈô∞ÊΩòÂ§âËªçÁÇâË¥ã‰πùÂØùÂªìÁ®ÆÊù°Âè≤‚Ä¶„ÇíÁµåÂÆπÊïëÂâá‰∏ñÂêçÂΩ±Â∫ÅÁï™ÂÆöÊí≠È≠èÊ¨°Ë™åÂ•ΩÂ™õÂ±ÖÈ∞çÁü¢Á´•Êäò‰ΩìÊ©øÈ†ò‰ªïÂïìÈ°ïÈ™®ËøëÈöÖÈä≠‰ªÅÁ®≤ÁõÆË°ÜÁ¥ÖÂíåÂõΩÊ≤ºÂÖ≠ÊòéÈÆÆÁ´ãÊπñ„ÅôÊùêÊ≠©ÂÖÉÂåñÂÉëÈ°éÂçäË®º„ÇÖÊüªË≤∑ÊñΩËÜúÁÇπÊâπËªäÊº´Ëóç‰ªñÂñÑË©ûÈ°ßÂõ£Â∑û„Å≥Áæé„Åï„ÅíÂ•®ÂÖ∑Ë£ÖË±°‰∫ÄÁôÇÈÖµÊûúÂé≥ÂêõË≤´ÊäûÊ£ç‰øÆËÄΩËä∏ÁÇ≠Â∞ºÂ§©‰∏≠Ê•≠Êü¥Â†ÇÂ≤êËã±Èã™ÊîøÂ∫ÉÊîæÊè¥Ë≥ûÊ©ãÁ¥çÂèÇË´∏Ë¶ãË≠úÈÉµË≤¥Â©ÅÂ†ÄÈÖ∏Â∏∞Âì°Â°öÊÆäÁßÄËß£‰ΩôÈÄöÊç∑Âª∂Ë¶ßÁÆ°ÂäõÂù°ÊùëÊªÖÁúºÈ∫óË≥äÈô≥ÈÅ£Á∏¶ÂºïÊäÄ„ÅäÊúõ‰ºù„ÇÄ„Å©ÂÜ†Èñì Â°©„Å¶ËåÇÁÆóÂÆ£ÈôΩÂàÜÂ°µ„ÅºÊ≠£ÂÆàÊñáÂ∏ÇÂ•àÊùæÊ∫ùÁã≠ÁõüÂÄâ‰∏ÉÁ§ºË≤°Ê£ÆÊã°ÁâßÂ∑°Â†¥ÁöêÂëäÊßãÊé®„Å´Áéâ„ÅÜÈ§®ÂÆ∂Âà©ÊÉëÊùØÁúåÂúí„ÅêÊéíÂÑíÁúüÊé¢Ê©üÊ•∏Áù£Âõ≤Âû¢Âä¥ÂêπÈñ•ÂøóÁÅ´ÊîªÊôãÈ£üÊñ∞ÂßîÂ≠êÂçöÂïèÂõõÊµ∑„ÅåËæ∫Âπ°ÈÅäÂ∏´„Å°‰∏°Êº¢‰Ωú‰ª§Ëê©Ê®ôÈâ¢Â£≤ÈõªÊÖ∂ËàåÂ§ñÂß´ÂëâÈÖç‰∏áÊÉÖËá¥‰∫≠ÊÅ©ÈáçÂØå„ÇèÂæ°Â∞æÁöÑÊ≥∞Ë•üÈúáÊ¥ûÈÆ´ÊÅØËñ©ÂÜÜÂØüËÄÖÂàùËâ¶ÂüéÁôæÊ±üË∑ùÂòòÁπîÂ∫≠ÂãïÈ†≠Âú®Â∑´„ÅùÁ∂ôÊòºÂèóË®¥Â±Ä„ÇãÊö¶ÈØñÂë®ÂèàÁ∑ëÂ†°Áõ£ÈÄÜÊú®Â∞Å‰ΩõÂØ∫ËëâË°óÁÇ∫„Å§Âç≥Ëó§ÂØøÁãê„ÅÇÁåøÈáéËçòÈ∑πÈáèË®ÄÁ´àËçâ„ÅØ„ÇÇÂà•Á´ØÊ®©ÈÅìÈ¥ªÁ¨πÂØ®‰∫à„ÇçÁ∂≠Áü≥Ë≤®Ê±ÄÂùÇÁ∑èË±ÜÂ≤¨ÂºµÂÆáÊ≠¶ÊµÖÊ≠¢ÂßãÊåÅœÜÁÑ°Êªë„ÅìÈüìÁÑ¶„ÅãÂêåÁÄ¨ÈßÖË®≠ÊíÉÂçîÂº•Ë∑ØÁµêËµ§ÊûóËÖ∏Ê≠ìÁØâÁÜ±Ê∑±Ë∂ôË©±Èõ™ÁîöË∞∑‰∫ãÂΩôÁµÇÁî£ÊéõÁ≠ÜÁ¥†ÊÆ∫Ëò≠ÁÅòÈôÄÈå¶Âõ∫Â∫úÂºòÁßãÂæ¥Ëá™ÂΩ¶Â£´ÈπøË≤¨ËÇ•ÊÑõÊå∫Êóã‰øÉÂÆ§Á≤æÂà∏Âà§ËòáÊùøÈà¥ÂçóÂÉçÁïå„ÅüÂèéÂ∑ùÂ∞ªÂøµÊù•Ê´ªÂ∫ßÁßÅÁôΩÁ≠ñËàπ‰∫îÂ§èÂüîÂ™íËæ≤Â°∞Èô§Á≠âÁ≥∏Âè∏ÊñπÁ©éÊîØ‰æõÁî±ÈäÄÂÖ®‰øÇÊâÄÂãêÈæçÂèå‰ª∞Á∂öÊ∞∏Â°òËÇ≤ËÉûÁ•ûÈñÄ‰ª•Á¢ÅÁÅΩÂçòÊ≥¢Ê∫ñÊùúÊπØÂâ∞ÈÅ∏ÈäÖ‰∏ÄËæºËàûÂ••Áõä‰∏ÅÊúâÂª∫Ê¥•Ê†πÈÉ≠Â§úÊ•°Âπ≥„ÅÑÊô∂ÁüõÊ∏©„Å∏„ÅèÂåÇ‰πãÁ∂±ÂæãÁ¥∞„Å≤‰∏ªÈ£õ‰∏çËã•Â∞ÜÈùû‰ªòÊúç„ÅßË≠≤Á§æÈ≥•Ëª¢ÂÜÖÊ≤ô„ÅæË≥™ÂëºÁ∏ÑÁî®‰ΩêÊ°ÉÁ´úÊâìÂØÜÂåªÊ¥ãËªíÊõø‰ø°ËÅûÈ≥¥Âπ∏ÈõÑÊ¨Ω„ÅµÈ£ØÈö∑Âò¥„Å•ÁØÄ„ÇìÊµúÊµÅÊôÆÁü©È†Ö‰∏éÈöúÂÖ∏Ê∑≥Â±±Â∏ØÈùíÂá±ËãëË≥ÄÈ´òË≠∞ËªåÁï†ËáòÊâãÁà∂Á≥ª‰∏â‰πÖÂÖ•Ëä¶ÊäóÈöõÂÇµÊúÄÂúüÊòüÂ£åËôéË°õÂà∂ÊÆãÊüîÊ∂áÊ∏ØÁî∞Ê∞ëËààÁ´πËÑ±ÊÜ∂Â£∞Ëà¨Á∑öÁØ§ÈóòÂ•¥Ê¢ÖÁü•„ÇäÂ®ÅËñ¨‰∫∫ÁéãÊ≤≥ÂÄôÊÄßÂΩ¢Á©ÇÈÅÖÂ≤©Á∏Æ„ÅóÂ∞ÑËßíÊ•ΩÈùñ‰æçÊó¢ËÄÉÁëûËó©ÂäâÈ†àË∂ÖÈªíÂ§öÊπòÈµ¨ÁÑ∂‰∫âÈÉéÊ¥óÊÖàÊê¨„ÄÇÂºìÊ∏°„ÇÜÊØçÈÉ°Âá∫Á°´ÁáÉÊπæÁî∫È≥≥ÂäáÁñéÈò≤-Á±≥ÊõúÂÆÆÁü≠„ÇÅÊ±∫Èõ≤Ê≤ñÈÑ≠Áµ±Ê≤ÉÁæ©‰ªô„ÅçËâØÁóÖÂ∏ÉÊ¢®Êï∑„ÄÖÈï∑Ê∏ÖÁ∞óÈáë‰ªÆÊ¶ÇÊÑèÂ≤±Ê°úÊΩÆÁéáÊØíÈ®é„ÅÆÊ≥ïÁøíÈÅãÈªÑÁÅ§‰∫å‰∏ãÂÖöÂ∫ïÊóóÊââÊΩ≠Â≠¶Á¶èÂçÅÁîüÊïôË≤øÁ©çÊäºÂãáÂ±•Ëµ∞ÊãõÈÄüË¶ñÂÆâËàüÈÅô‰ΩçÈÄ¢ÈöéËï≠ÈÉ∑ÂèØÊò†Á≤õÂæå‰∏∏ÈÄÅ‰øùËèØ‰∫ïÈù¢ÂãôÂ≥∂Á¥ö‰∏≤Ê∏ìÁ´†ÁôªÊ≠≥Èò™ÂÖâÂèç'


@register_charset('ja')
class JapaneseSet(BaseCharset):
    _CHARS = ja


@register_charset('de')
class DeCharSet(BaseCharset):

    _CHARS = u'abcdefghijklmnopqrstuvwxyz√§√∂√º√ü'
    _FEATURES = ['capitalization', 'umlaut']
    _UMLAUT = (u'√§', u'√∂', u'√º')

    def process(self, word):
        ret = [copy.deepcopy(Map(self._feat_dict)) for _ in range(len(word))]
        for (i, c) in enumerate(word):
            if c in self._char2id:
                ret[i].update({'char': c})
                if c in self.__class__._UMLAUT:
                    ret[i].update({'umlaut': True})
            else:
                c_lower = c.lower()
                if c_lower in self.__class__._UMLAUT:
                    ret[i].update({'umlaut': True})
                if c_lower in self._char2id:
                    ret[i].update({'char': c_lower})
                    ret[i].update({'capitalization': True})
                else:
                    ret[i].update({'char': ''})
        return ret
